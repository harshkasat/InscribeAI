name: Deploy to AWS Lambda

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to ECR and update Lambda
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        id: build-image
        run: |
            # Build a docker container 
            echo "Registry: ${{ vars.ECR_REGISTRY }}"
            aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin ${{ vars.ECR_REGISTRY }}
            docker build -t ${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:latest .
            echo "Pushing image to ECR"
            docker push ${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:latest
            echo "name = image::${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:latest" >> $GITHUB_OUTPUT

      - name: Update Lambda Function
        run: |
          aws lambda update-function-configuration --function-name ${{ vars.LAMBDA_FUNCTION_NAME }} --image-uri ${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:latest
      - name: Update Lambda Environment Variables
        run: |
          aws lambda update-function-configuration --function-name ${{ vars.LAMBDA_FUNCTION_NAME }} --environment "Variables={
            GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }},
            SUPABASE_PASS=${{ secrets.SUPABASE_PASS }},
            SUPABASE_API_KEY=${{ secrets.SUPABASE_API_KEY }},
            SUPABASE_URL=${{ secrets.SUPABASE_URL }},
            AWS_REDIS_HOST_URL=${{ secrets.AWS_REDIS_HOST_URL }}
          }"
